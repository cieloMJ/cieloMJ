## 프로그래밍

- 프로그램(Program)
    
    **개념**
    
    - 문제를 해결하기 위한 명령어들의 집합
    - 컴퓨터에 내리는 명령어 묶음
    
- 프로그래밍(Programing)
    
    **개념**
    
    - 그 명령어 묶음을 만드는 과정
    - 프로그래밍 언어
        - 컴퓨터에게 작업을 지시하고 문제를 해결하는 도구
        - 예시 : Python
    
    **핵심**
    
    - 새 연산을 정의하고 조합하여 유용한 작업을 수행하는 것

---

## 문장

**Statement**

- 정의 : 특정 동작(action)을 지시하는, 실행 가능한 코드의 최소 단위
    - 동작을 기술하는 것을 넘어, 그 자체로 완결된 하나의 명령의 의미가 강함

## 표현식

**Expression**

- 정의 : 하나의 ‘값’으로 평가될 수 있는 모든 코드
    - 평가 : 표현식을 계산하여 그 결과인 ‘값’을 만들어내는 과정
    - 값 : 표현식이 평가된 결과
    → 더 이상 계산 혹은 평가될 수 없는, 프로그램의 가장 기본적인 데이터 조각
        - ex. 불리언 값 : True, False 
        (불리언_boolean : 컴퓨터에서 참과 거짓을 나타내는 숫자 1과 0만을 이용하는 방식)
- 예시
    - 3 + 5
    - x > 10
    - 5 * 4
- 주의 사항 
: 모든 값은 가장 단순한 형태의 표현식이지만 모든 표현식이 값인 것은 아님

---

## 변수

**Variable**

- 정의 : 값을 나중에 **다시 사용**하기 위해, 그 값에 붙여주는 고유한 이름 
           (**객체를 가르키는 이름**)
    - 사람이 데이터를 쉽게 다루기 위해 만드는 인간 친화적인 이름
    - 변수는 특정 객체를 가르키는(refer/point to) 이름표
    → 메모리 주소를 가지지(contain)하지 않음
        - 변수는 값을 담고 있는 것이 아닌 단순히 값을 담는 상자인 것
            
            (특정 값을 **기억**하거나 **가르키는** 이름)
            
        
- 변수 할당 (Variable Assignment)
    - 정의 : 표현식이 만들어낸 값에 이름을 붙이는(연결) 과정
            ( 값 혹은 표현식을 변수에 할당하는 것)
        - 할당 : 값에 이름을 붙여 나중에 다시 사용하기 위해 저장하는 과정
        - 할당문( Assignment Statement)
            - **Variable = Expression**
                1. 오른쪽 표현식 평가
                    - 가장 먼저, 할당 연산자(=)의 오른쪽에 있는 표현식 전체를 계산하여 하나의 결과값(객체)를 만듦
                2. 왼쪽 변수 명 확인
                    - 이미 처음 사용되었다면: 새로운 이름표를 준비
                    - 이미 존재하는 이름이라면: 기존 ‘이름표’를 그대로 사용
                3. 변수 명과 결과 값 연결(참조) 
                    - 재할당(Reassignment) : 이미 할당된 변수에 새로운 값을 다시 할당하는 것
                    - 변수는 특정 값을 기억하거나 가르키는 이름
                    - 재할당은 이 변수가 가르키는 대상을 새로운 값으로 변경하는 행위
                    → 기존 연결은 끊어지고 새로운 객체와의 연결만 남음
                        
                        ![image.png](attachment:12bd9d91-c527-4c3e-a86d-e47b77204333:image.png)
                        
                        - 예시 : 값 36.5를 변수 degrees에 할당 (degrees=36.5)
                        
                        ```python
                        number = 10
                        double = 2 * number
                        print(double) #20
                        
                        number = 5  #재할당
                        print(double) #20
                        ```
                        
- 변수 명 규칙
    - 영문 알파벳, 언더스코어(_), 숫자로 구성 (단, **숫자로 시작 불가**)
    - 대소문자 구분
    - 아래의 파이썬 내부 예약어로는 사용할 수 없음
        
        ![image.png](attachment:7d228562-4af4-42dd-8fcd-e7669df6ded7:image.png)
        

---

## 메모리

- 메모리 주소 : 메모리의 위치를 고유하게 식별하는 것 ( 값 + 속성 등)
- 객체 : 값 + 타입 + 메모리 주소 묶은 것
    - 메모리 주소 (고유한 ID) : ex. 제품의 바코드
    - 타입(type) : ex. 제품의 종류_정수, 실수 등
    - 값 (value) : ex. 제품의 실제 내용물

---

## 데이터 타입

**Data Type**

- 정의 : 변수나 값이 가질 수 있는 데이터 종류
    - 어떤 종류의 데이터인지, 어떻게 해석, 처리해야 하는 지를 정의
        
        → 값의 종류와 그 값으로 할 수 있는 동작(연산)을 결정하는 것
        
        → 값이 가질 수 있는 여러 종류를 구분하기 위해 필요
        
- 구성 요소
    - 값 (피연산자)
    - 연산자 : 값에 적용할 수 있는 연산
- 필요성
    - 각 타입에 따라 가능한 기능, 연산이 다름
        - + : 숫자 더하기, 문자열 결합
    - 각 데이터 타입 값도 각자에게 적합한 도구를 가짐
    - 타입을 명시적으로 지정 시 코드를 읽는 사람이 변수의 의도를 더 쉽게 이해
    - 잘못된 데이터 타입으로 인한 오류 사전 예방

---

## 기타

- Visual Studio Code 사용법
    - $python -i
        
        : 인터프리터 환경 실행 (python shell의 입력 프롬포트)
        
    - $python sample.py
    : 확장자가 .py인 파일(python)에 작성된 코드 실행

- Style Guide
    - 코드의 일관성과 가독성을 향상시키기 위한 규칙과 권장 사항들의 모음
    - 대표적인 스타일 가이드 : PEP 8
        - 변수 명 : 무엇을 위한 변수인지 직관적인 이름을 가져야 함
        - 들여쓰기 : tap (공백 4칸을 사용하여 코드 블록 들여쓰기)
        - 한 줄의 길이는 79자로 제한하며, 길어질 경우 줄 바꿈 사용
        - 문자와 밑줄을 사용하여 함수, 변수, 속성의 이름 작성
        - 함수 정의나 클래스 정의 등의 블록 사이에는 빈 줄 추가

- 주석 (comment)
    - 프로그램 코드 내에서 작성되는 설명이나 메모
        - 주석 처리된 부분은 프로그램 실행에 아무런 영향 주지 않음
        - ‘#’ 기호 사용
        - 코드의 복잡한 로직을 설명하거나 특정 부분을 잠시 비활성화할 때 유용하게 사용
        
- Python tutor
    - 파이썬 코드가 한 줄씩 어떻게 실행되는지 눈으로 보여주는 시각화 도구
    - 코드 작성 후 render all objects on the heap 옵션을 선택하여 실행
